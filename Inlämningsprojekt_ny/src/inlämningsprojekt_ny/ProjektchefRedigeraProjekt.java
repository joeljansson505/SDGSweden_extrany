/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inlämningsprojekt_ny;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.*;
import java.util.stream.*;
import javax.swing.JOptionPane;

/**
 *
 * @author svanteskold
 */
public class ProjektchefRedigeraProjekt extends javax.swing.JFrame {
    private InfDB idb;
    private String inloggadAnvandare;
    private int aid;
    private String pid;
    /**
     * Creates new form ProjektchefRedigeraProjekt
     */
    public ProjektchefRedigeraProjekt(InfDB idb, String inloggadAnvandare, int aid, String pid) {
       this.idb = idb;
       this.inloggadAnvandare = inloggadAnvandare;
       this.aid = aid;
       this.pid=pid;
        initComponents();
        fyllProjektInformation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projektchefTillbakaButton = new javax.swing.JButton();
        redigeraProjektLabel = new javax.swing.JLabel();
        redigerProjektField = new javax.swing.JTextField();
        satusRedigeraMinaProjektComboBox = new javax.swing.JComboBox<>();
        statusRedigeraProjektLabel = new javax.swing.JLabel();
        startdatumRedigeraProjektLabel = new javax.swing.JLabel();
        startdatumRedigeraProjektField = new javax.swing.JTextField();
        slutdatumRedigeraProjektLabel = new javax.swing.JLabel();
        slutdatumRedigeraProjektField = new javax.swing.JTextField();
        beskrivningRedigeraProjektLabel = new javax.swing.JLabel();
        beskrivningProjektField = new javax.swing.JTextField();
        partnersRedigeraProjektLabel = new javax.swing.JLabel();
        handläggareRedigeraProjektLabel = new javax.swing.JLabel();
        sparaAndringarRedigeraProjektButton = new javax.swing.JButton();
        felmeddelandepcLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        handlaggareRedigeraArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        partnerRedigeraArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        projektchefTillbakaButton.setText("Tillbaka");
        projektchefTillbakaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projektchefTillbakaButtonActionPerformed(evt);
            }
        });

        redigeraProjektLabel.setText("Projekt Namn:");

        redigerProjektField.setColumns(10);
        redigerProjektField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redigerProjektFieldActionPerformed(evt);
            }
        });

        satusRedigeraMinaProjektComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pågående", "Planerad", "Avslutad" }));
        satusRedigeraMinaProjektComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                satusRedigeraMinaProjektComboBoxActionPerformed(evt);
            }
        });

        statusRedigeraProjektLabel.setText("Status:");

        startdatumRedigeraProjektLabel.setText("Startdatum:");

        startdatumRedigeraProjektField.setColumns(8);
        startdatumRedigeraProjektField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startdatumRedigeraProjektFieldActionPerformed(evt);
            }
        });

        slutdatumRedigeraProjektLabel.setText("Slutdatum:");

        slutdatumRedigeraProjektField.setColumns(8);
        slutdatumRedigeraProjektField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slutdatumRedigeraProjektFieldActionPerformed(evt);
            }
        });

        beskrivningRedigeraProjektLabel.setText("Projektbeskrivning:");

        beskrivningProjektField.setColumns(20);
        beskrivningProjektField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beskrivningProjektFieldActionPerformed(evt);
            }
        });

        partnersRedigeraProjektLabel.setText("Partners:");

        handläggareRedigeraProjektLabel.setText("Handläggare:");

        sparaAndringarRedigeraProjektButton.setText("Spara");
        sparaAndringarRedigeraProjektButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sparaAndringarRedigeraProjektButtonActionPerformed(evt);
            }
        });

        handlaggareRedigeraArea.setColumns(20);
        handlaggareRedigeraArea.setRows(5);
        jScrollPane1.setViewportView(handlaggareRedigeraArea);

        partnerRedigeraArea.setColumns(20);
        partnerRedigeraArea.setRows(5);
        jScrollPane2.setViewportView(partnerRedigeraArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(startdatumRedigeraProjektLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(startdatumRedigeraProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                    .addComponent(slutdatumRedigeraProjektLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(slutdatumRedigeraProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(redigeraProjektLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(statusRedigeraProjektLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(satusRedigeraMinaProjektComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(redigerProjektField, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(beskrivningRedigeraProjektLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(beskrivningProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(139, 139, 139)
                                .addComponent(projektchefTillbakaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(sparaAndringarRedigeraProjektButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(felmeddelandepcLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(partnersRedigeraProjektLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(handläggareRedigeraProjektLabel)
                .addGap(109, 109, 109))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redigeraProjektLabel)
                    .addComponent(redigerProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(satusRedigeraMinaProjektComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusRedigeraProjektLabel))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startdatumRedigeraProjektLabel)
                            .addComponent(startdatumRedigeraProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slutdatumRedigeraProjektLabel)
                            .addComponent(slutdatumRedigeraProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(beskrivningRedigeraProjektLabel)
                            .addComponent(beskrivningProjektField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(partnersRedigeraProjektLabel)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(felmeddelandepcLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jScrollPane2))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(handläggareRedigeraProjektLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projektchefTillbakaButton)
                    .addComponent(sparaAndringarRedigeraProjektButton))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fyllProjektInformation() {
    try {
        // Projektdata
        String sql = "SELECT * FROM projekt WHERE pid = " + pid + ";";
        var projektData = idb.fetchRow(sql);

        if (projektData != null) {
            redigerProjektField.setText(projektData.get("projektnamn"));
            startdatumRedigeraProjektField.setText(projektData.get("startdatum"));
            slutdatumRedigeraProjektField.setText(projektData.get("slutdatum"));
            satusRedigeraMinaProjektComboBox.setSelectedItem(projektData.get("status"));
            beskrivningProjektField.setText(projektData.get("beskrivning"));
        }

        // Partnerdata
        String partnerSql = "SELECT namn FROM partner " +
                            "JOIN projekt_partner ON partner.pid = projekt_partner.partner_pid " +
                            "WHERE projekt_partner.pid = " + pid + ";";
        var partnerResultat = idb.fetchColumn(partnerSql);

        if (partnerResultat != null && !partnerResultat.isEmpty()) {
            String partnerText = String.join(", ", partnerResultat);
            partnerRedigeraArea.setText(partnerText);
        }

        // Handläggardata
        String handlaggareSql = "SELECT fornamn, efternamn " +
                                "FROM anstalld " +
                                "JOIN ans_proj ON anstalld.aid = ans_proj.aid " +
                                "WHERE ans_proj.pid = " + pid + ";";
        var handlaggareResultat = idb.fetchRows(handlaggareSql);

        if (handlaggareResultat != null && !handlaggareResultat.isEmpty()) {
            StringBuilder handlaggareNamn = new StringBuilder();

            for (var rad : handlaggareResultat) {
                String fornamn = rad.get("fornamn");
                String efternamn = rad.get("efternamn");
                handlaggareNamn.append(fornamn).append(" ").append(efternamn).append(", ");
            }

            if (handlaggareNamn.length() > 2) {
                handlaggareNamn.setLength(handlaggareNamn.length() - 2);
            }

            handlaggareRedigeraArea.setText(handlaggareNamn.toString());
        }

    } catch (InfException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Kunde inte hämta projektinformation: " + e.getMessage());
    }
    }
    
    private void projektchefTillbakaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projektchefTillbakaButtonActionPerformed
        // TODO add your handling code here:
        new ProjektchefMinaProjekt(idb, inloggadAnvandare, aid, pid).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_projektchefTillbakaButtonActionPerformed

    private void redigerProjektFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redigerProjektFieldActionPerformed
        // TODO add your handling code here:
        // Hämta texten som användaren skrivit i fältet för projektnamn
    // .trim() tar bort eventuella mellanslag i början och slutet av texten
    String nyttNamn = redigerProjektField.getText().trim();

    // Kontrollera om fältet är tomt
    if (nyttNamn.isEmpty()) {
        // Visa ett felmeddelande om användaren inte har skrivit något
        javax.swing.JOptionPane.showMessageDialog(this, "Du måste skriva ett projektnamn.");
    } else {
        // Om ett namn finns angivet, visa en bekräftelse på att det har registrerats (tillfälligt)
        // Detta meddelande bekräftar alltså endast att texten har registrerats i fältet, 
        // det sparas ännu inte till databasen här
        javax.swing.JOptionPane.showMessageDialog(this, "Projektnamn uppdaterat (tillfälligt): " + nyttNamn);
    }
    }//GEN-LAST:event_redigerProjektFieldActionPerformed

    private void satusRedigeraMinaProjektComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_satusRedigeraMinaProjektComboBoxActionPerformed
        // TODO add your handling code here:
        // Hämta det valda värdet från status-rullgardinsmenyn (ComboBoxen)
    // Eftersom getSelectedItem() returnerar ett Object, typomvandlas det till en String
    String valdStatus = (String) satusRedigeraMinaProjektComboBox.getSelectedItem();

    // Skriv ut den valda statusen i konsolen (för felsökning eller kontroll)
    // Detta används ofta vid testning för att verifiera att rätt värde valts
    System.out.println("Vald status: " + valdStatus);
    }//GEN-LAST:event_satusRedigeraMinaProjektComboBoxActionPerformed

    private void startdatumRedigeraProjektFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startdatumRedigeraProjektFieldActionPerformed
        // TODO add your handling code here:
       // Hämta det nya startdatumet som användaren skrivit in i textfältet, ta bort överflödiga mellanslag
    String nyttStartdatum = startdatumRedigeraProjektField.getText().trim();

    // Kontrollera att det nya datumet är i korrekt format (YYYY-MM-DD)
    if (!Validering.kollaDatum(nyttStartdatum)) {
        // Om formatet är fel, visa ett felmeddelande till användaren
        javax.swing.JOptionPane.showMessageDialog(this, "Startdatum måste vara i formatet YYYY-MM-DD.");
        return; // Avsluta metoden så att inget felaktigt skickas till databasen
    }

    try {
        // Hämta projektnamnet från fältet (används för att identifiera vilket projekt som ska uppdateras)
        String projektnamn = redigerProjektField.getText().trim(); 

        // Skapa SQL-frågan som uppdaterar projektets startdatum i databasen
        String sql = "UPDATE projekt SET startdatum = '" + nyttStartdatum + "' WHERE projektnamn = '" + projektnamn + "'";

        // Skicka frågan till databasen för att spara ändringen
        idb.update(sql);

        // Bekräfta för användaren att startdatumet har uppdaterats
        javax.swing.JOptionPane.showMessageDialog(this, "Startdatum uppdaterat till: " + nyttStartdatum);
    } catch (Exception e) {
        // Om något går fel under databasuppdateringen, visa ett felmeddelande med information om felet
        javax.swing.JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage());
    }

    }//GEN-LAST:event_startdatumRedigeraProjektFieldActionPerformed

    private void slutdatumRedigeraProjektFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slutdatumRedigeraProjektFieldActionPerformed
        // TODO add your handling code here:
        // Hämta det nya slutdatumet från textrutan och ta bort överflödiga mellanslag i början/slutet
    String nyttSlutdatum = slutdatumRedigeraProjektField.getText().trim();

    // Validera att datumet är i korrekt format (YYYY-MM-DD)
    if (!Validering.kollaDatum(nyttSlutdatum)) {
        // Visa felmeddelande om formatet är ogiltigt
        javax.swing.JOptionPane.showMessageDialog(this, "Slutdatum måste vara i formatet YYYY-MM-DD.");
        return; // Avsluta metoden om formatet inte stämmer
    }

    try {
        // Hämta projektets namn från textrutan (används för att hitta rätt projekt i databasen)
        String projektnamn = redigerProjektField.getText().trim(); 

        // Skapa en SQL-fråga för att uppdatera projektets slutdatum
        String sql = "UPDATE projekt SET slutdatum = '" + nyttSlutdatum + "' WHERE projektnamn = '" + projektnamn + "'";

        // Skicka frågan till databasen och utför uppdateringen
        idb.update(sql);

        // Visa bekräftelsemeddelande till användaren
        javax.swing.JOptionPane.showMessageDialog(this, "Slutdatum uppdaterat till: " + nyttSlutdatum);
    } catch (Exception e) {
        // Om något går fel, visa ett felmeddelande med information om felet
        javax.swing.JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage());
    }
    }//GEN-LAST:event_slutdatumRedigeraProjektFieldActionPerformed

    private void beskrivningProjektFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beskrivningProjektFieldActionPerformed
        // TODO add your handling code here:
        // Hämta det användaren har skrivit i beskrivningsfältet och ta bort eventuella mellanslag i början/slutet
        String nyBeskrivning = beskrivningProjektField.getText().trim();
        
        // Kontrollera att fältet inte är tomt med hjälp av en valideringsmetod
    if (!Validering.faltInteTomt(nyBeskrivning)) {
        // Visa felmeddelande om fältet är tomt och avsluta metoden
        javax.swing.JOptionPane.showMessageDialog(this, "Beskrivningen får inte vara tom.");
        return;
    }
        // Hämta projektets namn från ett annat fält i GUI:t (används för att hitta rätt projekt i databasen)
    try {
        String projektnamn = redigerProjektField.getText().trim(); 
        // Skapa SQL-fråga som uppdaterar projektets beskrivning i databasen
        String sql = "UPDATE projekt SET beskrivning = '" + nyBeskrivning + "' WHERE projektnamn = '" + projektnamn + "'";
        idb.update(sql);
        // Bekräftelse till användaren att beskrivningen sparades
        javax.swing.JOptionPane.showMessageDialog(this, "Beskrivning uppdaterad!");
    } 
        // Felhantering: om något går fel visas ett felmeddelande
    catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage());
    }
    }//GEN-LAST:event_beskrivningProjektFieldActionPerformed

    private void sparaAndringarRedigeraProjektButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sparaAndringarRedigeraProjektButtonActionPerformed
        // TODO add your handling code here:
        try {
        // === HÄMTA INDATA FRÅN FORMULÄRET ===
        // Dessa fält hämtar den information som användaren har skrivit in eller valt i GUI:t.
        String projektnamn = redigerProjektField.getText().trim(); // Namnet på projektet
        String status = satusRedigeraMinaProjektComboBox.getSelectedItem().toString(); // Projektstatus från dropdown
        String startdatum = startdatumRedigeraProjektField.getText().trim(); // Startdatum
        String slutdatum = slutdatumRedigeraProjektField.getText().trim(); // Slutdatum
        String beskrivning = beskrivningProjektField.getText().trim(); // Projektbeskrivning
        String partnerNamn = partnerRedigeraArea.getText().trim(); // Partnernamn som användaren matat in, kommateckenseparerat
        String handlaggare = handlaggareRedigeraArea.getText().trim(); // Handläggarnamn, kommateckenseparerat

        // === VALIDERING AV OBLIGATORISKA FÄLT ===
        // Kontrollera att projektnamnet inte är tomt eftersom det behövs för att identifiera vilket projekt som ska uppdateras.
        if (projektnamn.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fyll i projektets namn.");
            return;
        }

        // === HÄMTA UNIKT PROJEKT-ID (pid) BASERAT PÅ PROJEKTNAMNET ===
        String pid = idb.fetchSingle("SELECT pid FROM projekt WHERE projektnamn = '" + projektnamn + "'");
        if (pid == null) {
            JOptionPane.showMessageDialog(this, "Kunde inte hitta projekt-ID för det angivna projektnamnet.");
            return;
        }

        // === UPPDATERA SJÄLVA PROJEKTETS BASUPPGIFTER I DATABASEN ===
        String updateProjekt = "UPDATE projekt SET " +
            "projektnamn = '" + projektnamn + "', " +
            "beskrivning = '" + beskrivning + "', " +
            "status = '" + status + "', " +
            "startdatum = '" + startdatum + "', " +
            "slutdatum = '" + slutdatum + "' " +
            "WHERE pid = " + pid;
        idb.update(updateProjekt);

        // === SYNKRONISERA PARTNERDATA MED DATABASEN ===
        if (!partnerNamn.isEmpty()) {
            // 1. Dela upp de nya partnernamnen som användaren angivit, separerade med kommatecken
            Set<String> nyaPartnerNamn = new HashSet<>(Arrays.asList(partnerNamn.split(",")));
            nyaPartnerNamn = nyaPartnerNamn.stream().map(String::trim).collect(Collectors.toSet());

            // 2. Hämta de partnernamn som redan är kopplade till detta projekt
            List<String> gamlaPartnerNamn = new ArrayList<>();
            List<HashMap<String, String>> gamlaPartnerData = idb.fetchRows(
                "SELECT p.namn FROM partner p JOIN projekt_partner pp ON p.pid = pp.partner_pid WHERE pp.pid = " + pid);
            if (gamlaPartnerData != null) {
                for (HashMap<String, String> rad : gamlaPartnerData) {
                    gamlaPartnerNamn.add(rad.get("namn"));
                }
            }

            // 3. Ta bort de partnerkopplingar som inte längre finns i användarens input
            for (String gammal : gamlaPartnerNamn) {
                if (!nyaPartnerNamn.contains(gammal)) {
                    String partnerPid = idb.fetchSingle("SELECT pid FROM partner WHERE namn = '" + gammal + "'");
                    if (partnerPid != null) {
                        idb.delete("DELETE FROM projekt_partner WHERE pid = " + pid + " AND partner_pid = " + partnerPid);
                    }
                }
            }

            // 4. Lägg till nya partnerkopplingar som finns i inputen men inte i databasen
            for (String ny : nyaPartnerNamn) {
                if (!gamlaPartnerNamn.contains(ny)) {
                    String partnerPid = idb.fetchSingle("SELECT pid FROM partner WHERE namn = '" + ny + "'");
                    if (partnerPid != null) {
                        idb.insert("INSERT INTO projekt_partner (pid, partner_pid) VALUES (" + pid + ", " + partnerPid + ")");
                    } else {
                        JOptionPane.showMessageDialog(this, "Partnern '" + ny + "' hittades inte i databasen.");
                    }
                }
            }
        }

        // === SYNKRONISERA HANDLÄGGARDATA MED DATABASEN ===
        if (!handlaggare.isEmpty()) {
            // 1. Splitta handläggarnamn som användaren skrivit in och trimma dem
            Set<String> nyaHandlaggare = new HashSet<>(Arrays.asList(handlaggare.split(",")));
            nyaHandlaggare = nyaHandlaggare.stream().map(String::trim).collect(Collectors.toSet());

            // 2. Hämta de handläggare som redan är kopplade till projektet
            List<String> gamlaHandlaggare = new ArrayList<>();
            List<HashMap<String, String>> gamlaHandData = idb.fetchRows(
                "SELECT a.fornamn, a.efternamn FROM anstalld a JOIN ans_proj ap ON a.aid = ap.aid WHERE ap.pid = " + pid);
            if (gamlaHandData != null) {
                for (HashMap<String, String> rad : gamlaHandData) {
                    gamlaHandlaggare.add(rad.get("fornamn") + " " + rad.get("efternamn"));
                }
            }

            // 3. Ta bort handläggare som tagits bort från fältet
            for (String gammal : gamlaHandlaggare) {
                if (!nyaHandlaggare.contains(gammal)) {
                    String[] namn = gammal.split(" ");
                    if (namn.length >= 2) {
                        String aid = idb.fetchSingle("SELECT aid FROM anstalld WHERE fornamn = '" + namn[0] + "' AND efternamn = '" + namn[1] + "'");
                        if (aid != null) {
                            idb.delete("DELETE FROM ans_proj WHERE pid = " + pid + " AND aid = " + aid);
                        }
                    }
                }
            }

            // 4. Lägg till handläggare som är nya i fältet men inte i databasen
            for (String ny : nyaHandlaggare) {
                if (!gamlaHandlaggare.contains(ny)) {
                    String[] namn = ny.split(" ");
                    if (namn.length >= 2) {
                        String aid = idb.fetchSingle("SELECT aid FROM anstalld WHERE fornamn = '" + namn[0] + "' AND efternamn = '" + namn[1] + "'");
                        if (aid != null) {
                            idb.insert("INSERT INTO ans_proj (pid, aid) VALUES (" + pid + ", " + aid + ")");
                        } else {
                            JOptionPane.showMessageDialog(this, "Handläggaren '" + ny + "' hittades inte i databasen.");
                        }
                    }
                }
            }
        }

        // === VISA BEKRÄFTELSE FÖR ANVÄNDAREN ===
        JOptionPane.showMessageDialog(this,
            "Projektet har sparats med följande uppgifter:\n" +
            "Namn: " + projektnamn + "\n" +
            "Status: " + status + "\n" +
            "Startdatum: " + startdatum + "\n" +
            "Slutdatum: " + slutdatum + "\n" +
            "Beskrivning: " + beskrivning + "\n" +
            "Partner: " + partnerNamn + "\n" +
            "Handläggare: " + handlaggare,
            "Bekräftelse", JOptionPane.INFORMATION_MESSAGE);

    } catch (Exception e) {
        // === FELHANTERING: Om något går fel visas ett felmeddelande för användaren ===
        e.printStackTrace(); // Loggar detaljerat fel i konsolen
        JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage());
    }

          
    }//GEN-LAST:event_sparaAndringarRedigeraProjektButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjektchefRedigeraProjekt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjektchefRedigeraProjekt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjektchefRedigeraProjekt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjektchefRedigeraProjekt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ProjektchefRedigeraProjekt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField beskrivningProjektField;
    private javax.swing.JLabel beskrivningRedigeraProjektLabel;
    private javax.swing.JLabel felmeddelandepcLabel;
    private javax.swing.JTextArea handlaggareRedigeraArea;
    private javax.swing.JLabel handläggareRedigeraProjektLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea partnerRedigeraArea;
    private javax.swing.JLabel partnersRedigeraProjektLabel;
    private javax.swing.JButton projektchefTillbakaButton;
    private javax.swing.JTextField redigerProjektField;
    private javax.swing.JLabel redigeraProjektLabel;
    private javax.swing.JComboBox<String> satusRedigeraMinaProjektComboBox;
    private javax.swing.JTextField slutdatumRedigeraProjektField;
    private javax.swing.JLabel slutdatumRedigeraProjektLabel;
    private javax.swing.JButton sparaAndringarRedigeraProjektButton;
    private javax.swing.JTextField startdatumRedigeraProjektField;
    private javax.swing.JLabel startdatumRedigeraProjektLabel;
    private javax.swing.JLabel statusRedigeraProjektLabel;
    // End of variables declaration//GEN-END:variables
}
