/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inlämningsprojekt_ny;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.DriverManager;

import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.List;
import java.util.Map;

/**
 *
 * @author joelj
 */
public class AdminÄndraUppgifter extends javax.swing.JFrame {
    
    private InfDB idb;
    private String inloggadAnvandare;
    private int aid;

    /**
     * Creates new form AdminÄndraUppgifter
     */
    public AdminÄndraUppgifter(InfDB idb, String inloggadAnvandare, int aid) {
        this.idb = idb;
        this.inloggadAnvandare = inloggadAnvandare;
        this.aid = aid;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AdminUppgifterTillbakaButton = new javax.swing.JButton();
        AndraUppgifterComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableInfoUppgifter = new javax.swing.JTable();
        laggTillButton = new javax.swing.JButton();
        SparaButton = new javax.swing.JButton();
        raderaButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AdminUppgifterTillbakaButton.setText("Tillbaka");
        AdminUppgifterTillbakaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminUppgifterTillbakaButtonActionPerformed(evt);
            }
        });

        AndraUppgifterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Avdelning", "Projekt", "Land", "Partner" }));
        AndraUppgifterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AndraUppgifterComboBoxActionPerformed(evt);
            }
        });

        TableInfoUppgifter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableInfoUppgifter);

        laggTillButton.setText("Lägg till");
        laggTillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laggTillButtonActionPerformed(evt);
            }
        });

        SparaButton.setText("Spara ändring");
        SparaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SparaButtonActionPerformed(evt);
            }
        });

        raderaButton.setText("Radera");
        raderaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raderaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AdminUppgifterTillbakaButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AndraUppgifterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(laggTillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(raderaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                .addComponent(SparaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(224, 224, 224))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AdminUppgifterTillbakaButton)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AndraUppgifterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laggTillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SparaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(raderaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AdminUppgifterTillbakaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminUppgifterTillbakaButtonActionPerformed
        // TODO add your handling code here:
        new AdminMeny(idb, inloggadAnvandare, aid).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AdminUppgifterTillbakaButtonActionPerformed

    private void AndraUppgifterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AndraUppgifterComboBoxActionPerformed
        // TODO add your handling code here:
        String selected = AndraUppgifterComboBox.getSelectedItem().toString();
        DefaultTableModel model = new DefaultTableModel();
        
        try {
            switch (selected) {
                case "Avdelning":
                    model.setColumnIdentifiers(new String[] { "ID", "Namn", "Beskrivning", "Adress", "Epost", "Telefon", "Stad", "Chef" });
                    var rows1 = idb.fetchRows("SELECT * FROM avdelning");
                    for (var rad : rows1) {
                        model.addRow(new Object[] {
                            rad.get("avdid"),
                            rad.get("namn"),
                            rad.get("beskrivning"),
                            rad.get("adress"),
                            rad.get("epost"),
                            rad.get("telefon"),
                            rad.get("stad"),
                            rad.get("chef")
                        });
                    }
                        break;
                        
                        case "Projekt":
                        model.setColumnIdentifiers(new String[] { "ID", "Projektnamn", "Beskrivning", "Startdatum", "Slutdatum", "Kostnad", "Status", "Prioritet", "Projektchef", "Land" });
                        var rows2 = idb.fetchRows("SELECT * FROM projekt");
                        for (var rad : rows2) {
                             model.addRow(new Object[] {
                                rad.get("pid"),
                                rad.get("projektnamn"),
                                rad.get("beskrivning"),
                                rad.get("startdatum"),
                                rad.get("slutdatum"),
                                rad.get("kostnad"),
                                rad.get("status"),
                                rad.get("prioritet"),
                                rad.get("projektchef"),
                                rad.get("land")
                            });
                        }
                           break;
                    
                        case "Land":
                        model.setColumnIdentifiers(new String[] { "ID", "Namn", "Språk", "Valuta", "Tidszon", "Politisk Struktur", "Ekonomi" });
                        var rows3 = idb.fetchRows("SELECT * FROM land");
                        for (var rad : rows3) {
                        model.addRow(new Object[] {
                            rad.get("lid"),
                            rad.get("namn"),
                            rad.get("sprak"),
                            rad.get("valuta"),
                            rad.get("tidszon"),
                            rad.get("politisk_struktur"),
                            rad.get("ekonomi")
                          });
                       }
                        break;
                        
                        case "Partner":
                        model.setColumnIdentifiers(new String[] { "ID", "Namn", "Kontaktperson", "Kontaktepost", "Telefon", "Adress", "Branch", "Stad" });
                        var rows4 = idb.fetchRows("SELECT * FROM partner");
                        for (var rad : rows4) {
                        model.addRow(new Object[] {
                            rad.get("pid"),
                            rad.get("namn"),
                            rad.get("kontaktperson"),
                            rad.get("kontaktepost"),
                            rad.get("telefon"),
                            rad.get("adress"),
                            rad.get("branch"),
                            rad.get("stad")
                        });
                        }
                        break;
                    }
            
            TableInfoUppgifter.setModel(model);
            TableInfoUppgifter.getColumnModel().getColumn(0).setMinWidth(0);
            TableInfoUppgifter.getColumnModel().getColumn(0).setMaxWidth(0);
            TableInfoUppgifter.getColumnModel().getColumn(0).setWidth(0);
} catch (Exception e) {
    javax.swing.JOptionPane.showMessageDialog(this, "Fel vid hämtning: " + e.getMessage());
        }
    }//GEN-LAST:event_AndraUppgifterComboBoxActionPerformed

    private void laggTillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laggTillButtonActionPerformed
        // TODO add your handling code here:
        new AdminLäggTillUppgifter(idb, inloggadAnvandare, aid).setVisible(true);
    }//GEN-LAST:event_laggTillButtonActionPerformed

    private void SparaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SparaButtonActionPerformed
        // TODO add your handling code here:
        if (TableInfoUppgifter.isEditing()) {
            TableInfoUppgifter.getCellEditor().stopCellEditing();
            
    }
        int rad = TableInfoUppgifter.getSelectedRow();
        
        if (rad == -1) {
            JOptionPane.showMessageDialog(this, "Välj en rad att spara.");
            return;
        
        }
        
        try {
            String selected = AndraUppgifterComboBox.getSelectedItem().toString();
            
         if (selected.equals("Avdelning")) {
            String id = TableInfoUppgifter.getValueAt(rad, 0).toString();
            String namn = TableInfoUppgifter.getValueAt(rad, 1).toString();
            String adress = TableInfoUppgifter.getValueAt(rad, 2).toString();
            String epost = TableInfoUppgifter.getValueAt(rad, 3).toString();
            String telefon = TableInfoUppgifter.getValueAt(rad, 4).toString();
            String stad = TableInfoUppgifter.getValueAt(rad, 5).toString();
            String chef = TableInfoUppgifter.getValueAt(rad, 6).toString();
            String beskrivning = TableInfoUppgifter.getValueAt(rad, 7).toString();
            
            namn = namn.replace("'", "''");
            adress = adress.replace("'", "''");
            epost = epost.replace("'", "''");
            telefon = telefon.replace("'", "''");
            stad = stad.replace("'", "''");
            chef = chef.replace("'", "''");
            beskrivning = beskrivning.replace("'", "''");
            
            String sql = "UPDATE avdelning SET namn='" + namn + "', adress='" + adress + "', epost='" + epost + "', telefon='" + telefon + 
                    "',stad='" + stad + "', chef='" + chef + "', beskrivning='" + beskrivning + "' WHERE avdid=" + id;
            idb.update(sql);
            JOptionPane.showMessageDialog(this, "Uppgifter sparade!");
            AndraUppgifterComboBoxActionPerformed(null);
         }
         
         if (selected.equals("Projekt")) {
             String id = TableInfoUppgifter.getValueAt(rad, 0).toString();
             String projektnamn = TableInfoUppgifter.getValueAt(rad, 1).toString();
             String beskrivning = TableInfoUppgifter.getValueAt(rad, 2).toString();
             String startdatum = TableInfoUppgifter.getValueAt(rad, 3).toString();
             String slutdatum = TableInfoUppgifter.getValueAt(rad, 4).toString();
             String kostnad = TableInfoUppgifter.getValueAt(rad, 5).toString();
             String status = TableInfoUppgifter.getValueAt(rad, 6).toString();
             String prioritet = TableInfoUppgifter.getValueAt(rad, 7).toString();
             String projektchef = TableInfoUppgifter.getValueAt(rad, 8).toString();
             String land = TableInfoUppgifter.getValueAt(rad, 9).toString();
             
             projektnamn = projektnamn.replace("'", "''");
             beskrivning = beskrivning.replace("'", "''");
             status = status.replace("'", "''");
             prioritet = prioritet.replace("'", "''");
             projektchef = projektchef.replace("'", "''");
             land = land.replace("'", "''");
             
             String sql = "UPDATE projekt SET " + 
                     "projektnamn='" + projektnamn + "'," + 
                     "beskrivning='" + beskrivning + "'," +
                     "startdatum='" + startdatum + "'," + 
                     "slutdatum='" + slutdatum + "'," +
                     "kostnad='" + kostnad + "'," + 
                     "status='" + status + "'," + 
                     "prioritet='" + prioritet + "'," + 
                     "projektchef='" + projektchef + "'," + 
                     "land='" + land + "'" + 
                     "WHERE pid=" + id;
             
             idb.update(sql);
             JOptionPane.showMessageDialog(this, "Projekt uppdaterat!");
             AndraUppgifterComboBoxActionPerformed(null);
                     
         }
         
         if (selected.equals("Land")) {
             String id = TableInfoUppgifter.getValueAt(rad, 0).toString();
             String namn = TableInfoUppgifter.getValueAt(rad, 1).toString();
             String sprak = TableInfoUppgifter.getValueAt(rad, 2).toString();
             String valuta = TableInfoUppgifter.getValueAt(rad, 3).toString();
             String tidszon = TableInfoUppgifter.getValueAt(rad, 4).toString();
             String politisk_struktur = TableInfoUppgifter.getValueAt(rad, 5).toString();
             String ekonomi = TableInfoUppgifter.getValueAt(rad, 6).toString();
             
             namn = namn.replace("'", "''");
             sprak = sprak.replace("'", "''");
             valuta = valuta.replace("'", "''");
             tidszon = tidszon.replace("'", "''");
             politisk_struktur = politisk_struktur.replace("'", "''");
             ekonomi = ekonomi.replace("'", "''");
             
             String sql = "UPDATE land SET " + 
                     "namn='" + namn + "'," + 
                     "sprak'" + sprak + "'," + 
                     "valuta'" + valuta + "'," + 
                     "tidszon'" + tidszon + "'," + 
                     "politisk_struktur'" + politisk_struktur + "'," + 
                     "ekonomi'" + ekonomi + "'" + 
                     "WHERE lid =" + id;
             
             idb.update(sql);
             JOptionPane.showMessageDialog(this, "Land uppdaterat!");
             AndraUppgifterComboBoxActionPerformed(null);
             
         }
         
         if (selected.equals("Partner")) {
             String id = TableInfoUppgifter.getValueAt(rad, 0).toString();
             String namn = TableInfoUppgifter.getValueAt(rad, 1).toString();
             String kontaktperson = TableInfoUppgifter.getValueAt(rad, 2).toString();
             String kontaktepost = TableInfoUppgifter.getValueAt(rad, 3).toString();
             String telefon = TableInfoUppgifter.getValueAt(rad, 4).toString();
             String adress = TableInfoUppgifter.getValueAt(rad, 5).toString();
             String branch = TableInfoUppgifter.getValueAt(rad, 6).toString();
             String stad = TableInfoUppgifter.getValueAt(rad, 7).toString();
             
             namn = namn.replace("'", "''");
             kontaktperson = kontaktperson.replace("'", "''");
             kontaktepost = kontaktepost.replace("'", "''");
             telefon = telefon.replace("'", "''");
             adress = adress.replace("'", "''");
             branch = branch.replace("'", "''");
             stad = stad.replace("'", "''");
             
             String sql = "UPDATE partner SET " +
                     "namn='" + namn + "'," + 
                     "kontaktperson='" + kontaktperson + "'," + 
                     "kontaktepost='" + kontaktepost + "'," + 
                     "telefon='" + telefon + "'," + 
                     "adress='" + adress + "'," + 
                     "branch='" + branch + "'," + 
                     "stad='" + stad + "'" + 
                     "WHERE pid =" + id;
             
             idb.update(sql);
             JOptionPane.showMessageDialog(this, "Partner uppdaterat!");
             AndraUppgifterComboBoxActionPerformed(null);
         }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Fel vid Uppdatering: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_SparaButtonActionPerformed

    private void raderaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raderaButtonActionPerformed
        // TODO add your handling code here:
int rad = TableInfoUppgifter.getSelectedRow();
if (rad == -1) {
    JOptionPane.showMessageDialog(this, "Välj en rad att radera.");
    return;
}

int confirm = JOptionPane.showConfirmDialog(this, "Är du säker på att du vill radera det valda projektet?", "Bekräfta radering", JOptionPane.YES_NO_OPTION);
if (confirm != JOptionPane.YES_OPTION) {
    return;
}

String selected = AndraUppgifterComboBox.getSelectedItem().toString();
String id = TableInfoUppgifter.getValueAt(rad, 0).toString();

try {
    switch (selected) {
        case "Avdelning":
            // Sätt referenser i alla tabeller som har avdid till NULL först
            idb.update("UPDATE avd_hallbarhet SET avdid = NULL WHERE avdid = " + id + ";");
            idb.update("UPDATE anstallda SET avdid = NULL WHERE avdid = " + id + ";");

            // Radera avdelningen
            idb.delete("DELETE FROM avdelning WHERE avdid = " + id + ";");
            break;

        case "Projekt":
            idb.delete("DELETE FROM proj_hallbarhet WHERE pid = " + id + ";");
            idb.delete("DELETE FROM projekt_partner WHERE pid = " + id + ";");
            idb.delete("DELETE FROM ans_proj WHERE pid = " + id + ";");
            idb.delete("DELETE FROM projekt WHERE pid = " + id + ";");
            break;

        case "Land":
            idb.update("UPDATE projekt SET land = NULL WHERE land = " + id + ";");
            idb.update("UPDATE stad SET land = NULL WHERE land = " + id + ";");
            idb.delete("DELETE FROM land WHERE lid = " + id + ";");
            break;

        case "Partner":
            idb.delete("DELETE FROM projekt_partner WHERE partner_pid = " + id + ";");
            idb.delete("DELETE FROM partner WHERE pid = " + id + ";");
            break;

        default:
            JOptionPane.showMessageDialog(this, "Ogiltigt val.");
            return;
    }

    JOptionPane.showMessageDialog(this, selected + " har raderats.");
    AndraUppgifterComboBoxActionPerformed(null);

} catch (InfException e) {
    JOptionPane.showMessageDialog(this, "Fel vid radering: " + e.getMessage());
    e.printStackTrace();
}
    }//GEN-LAST:event_raderaButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminÄndraUppgifter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminÄndraUppgifter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminÄndraUppgifter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminÄndraUppgifter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AdminÄndraUppgifter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdminUppgifterTillbakaButton;
    private javax.swing.JComboBox<String> AndraUppgifterComboBox;
    private javax.swing.JButton SparaButton;
    private javax.swing.JTable TableInfoUppgifter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton laggTillButton;
    private javax.swing.JButton raderaButton;
    // End of variables declaration//GEN-END:variables
}
